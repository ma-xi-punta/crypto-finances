import streamlit as st
import requests
import pandas as pd
import matplotlib.pyplot as plt

API_URL = "http://127.0.0.1:8000"  # Aseg√∫rate de que FastAPI est√© corriendo

st.set_page_config(layout="wide")  # Configuraci√≥n para pantalla ancha

# üîπ Centrar t√≠tulo con CSS y reducir espacio superior
st.markdown(
    """
    <style>
        .title-container {
            text-align: center;
            margin-top: -60px;  /* Reduce el espacio vac√≠o arriba del t√≠tulo */
        }
    </style>
    <div class="title-container">
        <h1>ü™ô Crypto Portfolio Tracker üí∞</h1>
    </div>
    """,
    unsafe_allow_html=True
)

# üîπ Dividir en tres columnas: una vac√≠a en el medio para m√°s separaci√≥n
col1, spacer, col2 = st.columns([3, 1, 3])

# üîπ Columna 1: Formulario y tabla de historial
with col1:
    # Formulario para agregar transacci√≥n
    st.header("‚ûï Agregar Transacci√≥n")
    crypto = st.text_input("Criptomoneda (ej: BTC, ETH, USDT)").upper()
    amount = st.number_input("Cantidad", min_value=0.0, format="%.6f")

    if st.button("Agregar"):
        if crypto and amount > 0:
            try:
                response = requests.post(f"{API_URL}/api/transactions/", json={"crypto": crypto, "amount": amount})
                if response.status_code == 200:
                    st.success("‚úÖ Transacci√≥n agregada exitosamente")
                    st.rerun()  # Recargar la app para reflejar cambios
                else:
                    st.error(f"‚ùå Error al agregar la transacci√≥n: {response.text}")
            except requests.exceptions.RequestException:
                st.error("üö® No se pudo conectar con la API. Aseg√∫rate de que est√° corriendo.")

    # Obtener y mostrar las transacciones (ordenadas por fecha descendente)
    st.header("üìã Historial de Transacciones")
    total_price_at_purchase = 0
    try:
        response = requests.get(f"{API_URL}/api/transactions/")
        if response.status_code == 200:
            transactions = response.json()
            if transactions:
                df = pd.DataFrame(transactions)
                df = df.sort_values(by="date", ascending=False)  # Ordenar por fecha m√°s reciente
                total_price_at_purchase = df["price_at_purchase"].sum()
                st.dataframe(df[["crypto", "amount", "price_at_purchase", "date"]].head(5))  # Mostrar solo 5
            else:
                st.info("‚ÑπÔ∏è No hay transacciones registradas a√∫n.")
        else:
            st.error(f"‚ùå Error al obtener transacciones: {response.text}")
    except requests.exceptions.RequestException:
        st.error("üö® No se pudo conectar con la API. Aseg√∫rate de que est√° corriendo.")

# üîπ Espaciador vac√≠o (columna del medio)
with spacer:
    st.write("")  # Esto mantiene la separaci√≥n

# üîπ Columna 2: Gr√°fico del portafolio (Torta)
with col2:
    st.header(f"üìà Valor actual del Portafolio - Total Comprado: ${total_price_at_purchase:.2f}")
    try:
        response = requests.get(f"{API_URL}/api/portfolio/")
        if response.status_code == 200:
            portfolio_data = response.json()
            portfolio = portfolio_data.get("portfolio", {})

            if portfolio:
                fig, ax = plt.subplots(figsize=(1, 1))  # Hacer el gr√°fico m√°s compacto
                cryptos = list(portfolio.keys())
                values = [portfolio[c]["total_value"] for c in cryptos]

                # Crear gr√°fico de torta con etiquetas y porcentajes m√°s peque√±os
                ax.pie(values, 
                        labels=cryptos, 
                        autopct="%1.1f%%", 
                        startangle=140, 
                        colors=plt.cm.Paired.colors,
                        textprops={"fontsize": 4})  # Reducir a√∫n m√°s el tama√±o de los textos

                ax.set_title("Distribuci√≥n del Portafolio", fontsize=6, pad=-10)  # Achicar t√≠tulo y reducir espacio

                st.pyplot(fig)
            else:
                st.info("‚ÑπÔ∏è No hay datos suficientes para mostrar el portafolio.")
        else:
            st.error(f"‚ùå Error al obtener portafolio: {response.text}")
    except requests.exceptions.RequestException:
        st.error("üö® No se pudo conectar con la API. Aseg√∫rate de que est√° corriendo.")